AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ApplicationName:
    Type: String

  EnvironmentName:
    Type: String

  KeyPairName:
    Type: String
    Default: 'my_key'

  InstanceCount:
    Type: Number
    Default: '1'

  ArtifactS3Bucket:
    Type: String

Mappings:
  RegionOS2AMI:
    eu-west-1:
      Linux: ami-f90a4880
Resources:
  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Count: !Ref InstanceCount
      Handle: !Ref WaitHandle
      Timeout: '1800'

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${ApplicationName}-Instance-${AWS::Region}
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 's3:Get*'
                Resource: !Sub 'arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*'
  InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref InstanceRole


  # VPC and networking
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.0.0/24
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.1.0/24
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.2.0/24
      AvailabilityZone: !Sub "${AWS::Region}c"
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  # ELB configuration
  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Ref ApplicationName
      HealthCheckPath: '/hello'
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP

  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELB

  ELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref ApplicationName
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ELBSecurityGroup

  # AutoScaling configuration
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - Linux
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
            #!/bin/bash -ex
            apt-get update
            apt-get install -y git maven openjdk-8-jdk-headless awscli ruby wget python-setuptools

            mkdir aws-cfn-bootstrap-latest
            curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
            easy_install aws-cfn-bootstrap-latest

            wget https://aws-codedeploy-eu-west-1.s3.amazonaws.com/latest/install
            chmod +x install; ./install auto
            service codedeploy-agent start

            cat > /tmp/application.properties <<EOF
            suchname=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            EOF

            /usr/local/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup complete."  "${WaitHandle}"


  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Ref ApplicationName
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref InstanceCount
      MinSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      TargetGroupARNs:
        - !Ref ELBTargetGroup

  # Deployment group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Ref EnvironmentName
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: 
        Fn::ImportValue:
          !Sub CodeDeployRole-${ApplicationName}
      ApplicationName: 
        Fn::ImportValue:
          !Sub CodeDeployApplication-${ApplicationName} 
      AutoScalingGroups:
        - !Ref AutoScalingGroup

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VPC
      GroupDescription: Allow access to instances only from ELB
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ELBSecurityGroup 
          IpProtocol: -1
      Tags: 
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}

  ELBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId: !Ref VPC
          GroupDescription: Open ELB
          SecurityGroupIngress:
              - CidrIp: 0.0.0.0/0
                IpProtocol: -1
          Tags: 
              - Key: Name
                Value: !Sub ${ApplicationName}-${EnvironmentName}-ELB


Outputs:
  URL:
    Value: !Sub http://${ELB.DNSName}
